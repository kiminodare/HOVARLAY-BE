// Code generated by ent, DO NOT EDIT.

package history

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldText, v))
}

// Voice applies equality check predicate on the "voice" field. It's identical to VoiceEQ.
func Voice(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldVoice, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldRate, v))
}

// Pitch applies equality check predicate on the "pitch" field. It's identical to PitchEQ.
func Pitch(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldPitch, v))
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldVolume, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldText, v))
}

// VoiceEQ applies the EQ predicate on the "voice" field.
func VoiceEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldVoice, v))
}

// VoiceNEQ applies the NEQ predicate on the "voice" field.
func VoiceNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldVoice, v))
}

// VoiceIn applies the In predicate on the "voice" field.
func VoiceIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldVoice, vs...))
}

// VoiceNotIn applies the NotIn predicate on the "voice" field.
func VoiceNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldVoice, vs...))
}

// VoiceGT applies the GT predicate on the "voice" field.
func VoiceGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldVoice, v))
}

// VoiceGTE applies the GTE predicate on the "voice" field.
func VoiceGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldVoice, v))
}

// VoiceLT applies the LT predicate on the "voice" field.
func VoiceLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldVoice, v))
}

// VoiceLTE applies the LTE predicate on the "voice" field.
func VoiceLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldVoice, v))
}

// VoiceContains applies the Contains predicate on the "voice" field.
func VoiceContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldVoice, v))
}

// VoiceHasPrefix applies the HasPrefix predicate on the "voice" field.
func VoiceHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldVoice, v))
}

// VoiceHasSuffix applies the HasSuffix predicate on the "voice" field.
func VoiceHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldVoice, v))
}

// VoiceEqualFold applies the EqualFold predicate on the "voice" field.
func VoiceEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldVoice, v))
}

// VoiceContainsFold applies the ContainsFold predicate on the "voice" field.
func VoiceContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldVoice, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.History {
	return predicate.History(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.History {
	return predicate.History(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldRate, v))
}

// PitchEQ applies the EQ predicate on the "pitch" field.
func PitchEQ(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldPitch, v))
}

// PitchNEQ applies the NEQ predicate on the "pitch" field.
func PitchNEQ(v float64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldPitch, v))
}

// PitchIn applies the In predicate on the "pitch" field.
func PitchIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldIn(FieldPitch, vs...))
}

// PitchNotIn applies the NotIn predicate on the "pitch" field.
func PitchNotIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldPitch, vs...))
}

// PitchGT applies the GT predicate on the "pitch" field.
func PitchGT(v float64) predicate.History {
	return predicate.History(sql.FieldGT(FieldPitch, v))
}

// PitchGTE applies the GTE predicate on the "pitch" field.
func PitchGTE(v float64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldPitch, v))
}

// PitchLT applies the LT predicate on the "pitch" field.
func PitchLT(v float64) predicate.History {
	return predicate.History(sql.FieldLT(FieldPitch, v))
}

// PitchLTE applies the LTE predicate on the "pitch" field.
func PitchLTE(v float64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldPitch, v))
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldVolume, v))
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v float64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldVolume, v))
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldIn(FieldVolume, vs...))
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldVolume, vs...))
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v float64) predicate.History {
	return predicate.History(sql.FieldGT(FieldVolume, v))
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v float64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldVolume, v))
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v float64) predicate.History {
	return predicate.History(sql.FieldLT(FieldVolume, v))
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v float64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldVolume, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(sql.NotPredicates(p))
}
