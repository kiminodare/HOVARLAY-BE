// Code generated by ent, DO NOT EDIT.

package history

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the history type in the database.
	Label = "history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldVoice holds the string denoting the voice field in the database.
	FieldVoice = "voice"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldPitch holds the string denoting the pitch field in the database.
	FieldPitch = "pitch"
	// FieldVolume holds the string denoting the volume field in the database.
	FieldVolume = "volume"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the history in the database.
	Table = "histories"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "histories"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_histories"
)

// Columns holds all SQL columns for history fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldVoice,
	FieldRate,
	FieldPitch,
	FieldVolume,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_histories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// VoiceValidator is a validator for the "voice" field. It is called by the builders before save.
	VoiceValidator func(string) error
	// DefaultRate holds the default value on creation for the "rate" field.
	DefaultRate float64
	// RateValidator is a validator for the "rate" field. It is called by the builders before save.
	RateValidator func(float64) error
	// DefaultPitch holds the default value on creation for the "pitch" field.
	DefaultPitch float64
	// PitchValidator is a validator for the "pitch" field. It is called by the builders before save.
	PitchValidator func(float64) error
	// DefaultVolume holds the default value on creation for the "volume" field.
	DefaultVolume float64
	// VolumeValidator is a validator for the "volume" field. It is called by the builders before save.
	VolumeValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the History queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByVoice orders the results by the voice field.
func ByVoice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoice, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByPitch orders the results by the pitch field.
func ByPitch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPitch, opts...).ToFunc()
}

// ByVolume orders the results by the volume field.
func ByVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolume, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
