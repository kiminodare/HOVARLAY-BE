// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/history"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/user"
)

// HistoryCreate is the builder for creating a History entity.
type HistoryCreate struct {
	config
	mutation *HistoryMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (_c *HistoryCreate) SetText(v string) *HistoryCreate {
	_c.mutation.SetText(v)
	return _c
}

// SetVoice sets the "voice" field.
func (_c *HistoryCreate) SetVoice(v string) *HistoryCreate {
	_c.mutation.SetVoice(v)
	return _c
}

// SetRate sets the "rate" field.
func (_c *HistoryCreate) SetRate(v float64) *HistoryCreate {
	_c.mutation.SetRate(v)
	return _c
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (_c *HistoryCreate) SetNillableRate(v *float64) *HistoryCreate {
	if v != nil {
		_c.SetRate(*v)
	}
	return _c
}

// SetPitch sets the "pitch" field.
func (_c *HistoryCreate) SetPitch(v float64) *HistoryCreate {
	_c.mutation.SetPitch(v)
	return _c
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (_c *HistoryCreate) SetNillablePitch(v *float64) *HistoryCreate {
	if v != nil {
		_c.SetPitch(*v)
	}
	return _c
}

// SetVolume sets the "volume" field.
func (_c *HistoryCreate) SetVolume(v float64) *HistoryCreate {
	_c.mutation.SetVolume(v)
	return _c
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (_c *HistoryCreate) SetNillableVolume(v *float64) *HistoryCreate {
	if v != nil {
		_c.SetVolume(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *HistoryCreate) SetCreatedAt(v time.Time) *HistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *HistoryCreate) SetNillableCreatedAt(v *time.Time) *HistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *HistoryCreate) SetUpdatedAt(v time.Time) *HistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *HistoryCreate) SetNillableUpdatedAt(v *time.Time) *HistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *HistoryCreate) SetID(v uuid.UUID) *HistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *HistoryCreate) SetNillableID(v *uuid.UUID) *HistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *HistoryCreate) SetUserID(id uuid.UUID) *HistoryCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *HistoryCreate) SetNillableUserID(id *uuid.UUID) *HistoryCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *HistoryCreate) SetUser(v *User) *HistoryCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (_c *HistoryCreate) Mutation() *HistoryMutation {
	return _c.mutation
}

// Save creates the History in the database.
func (_c *HistoryCreate) Save(ctx context.Context) (*History, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *HistoryCreate) SaveX(ctx context.Context) *History {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *HistoryCreate) defaults() {
	if _, ok := _c.mutation.Rate(); !ok {
		v := history.DefaultRate
		_c.mutation.SetRate(v)
	}
	if _, ok := _c.mutation.Pitch(); !ok {
		v := history.DefaultPitch
		_c.mutation.SetPitch(v)
	}
	if _, ok := _c.mutation.Volume(); !ok {
		v := history.DefaultVolume
		_c.mutation.SetVolume(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := history.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := history.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := history.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *HistoryCreate) check() error {
	if _, ok := _c.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`generated: missing required field "History.text"`)}
	}
	if v, ok := _c.mutation.Text(); ok {
		if err := history.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`generated: validator failed for field "History.text": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Voice(); !ok {
		return &ValidationError{Name: "voice", err: errors.New(`generated: missing required field "History.voice"`)}
	}
	if v, ok := _c.mutation.Voice(); ok {
		if err := history.VoiceValidator(v); err != nil {
			return &ValidationError{Name: "voice", err: fmt.Errorf(`generated: validator failed for field "History.voice": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`generated: missing required field "History.rate"`)}
	}
	if v, ok := _c.mutation.Rate(); ok {
		if err := history.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`generated: validator failed for field "History.rate": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Pitch(); !ok {
		return &ValidationError{Name: "pitch", err: errors.New(`generated: missing required field "History.pitch"`)}
	}
	if v, ok := _c.mutation.Pitch(); ok {
		if err := history.PitchValidator(v); err != nil {
			return &ValidationError{Name: "pitch", err: fmt.Errorf(`generated: validator failed for field "History.pitch": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Volume(); !ok {
		return &ValidationError{Name: "volume", err: errors.New(`generated: missing required field "History.volume"`)}
	}
	if v, ok := _c.mutation.Volume(); ok {
		if err := history.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`generated: validator failed for field "History.volume": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "History.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "History.updated_at"`)}
	}
	return nil
}

func (_c *HistoryCreate) sqlSave(ctx context.Context) (*History, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *HistoryCreate) createSpec() (*History, *sqlgraph.CreateSpec) {
	var (
		_node = &History{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(history.Table, sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Text(); ok {
		_spec.SetField(history.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := _c.mutation.Voice(); ok {
		_spec.SetField(history.FieldVoice, field.TypeString, value)
		_node.Voice = value
	}
	if value, ok := _c.mutation.Rate(); ok {
		_spec.SetField(history.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := _c.mutation.Pitch(); ok {
		_spec.SetField(history.FieldPitch, field.TypeFloat64, value)
		_node.Pitch = value
	}
	if value, ok := _c.mutation.Volume(); ok {
		_spec.SetField(history.FieldVolume, field.TypeFloat64, value)
		_node.Volume = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(history.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(history.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HistoryCreateBulk is the builder for creating many History entities in bulk.
type HistoryCreateBulk struct {
	config
	err      error
	builders []*HistoryCreate
}

// Save creates the History entities in the database.
func (_c *HistoryCreateBulk) Save(ctx context.Context) ([]*History, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*History, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *HistoryCreateBulk) SaveX(ctx context.Context) []*History {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
