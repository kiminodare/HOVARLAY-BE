// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/history"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/predicate"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/user"
)

// HistoryUpdate is the builder for updating History entities.
type HistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HistoryMutation
}

// Where appends a list predicates to the HistoryUpdate builder.
func (_u *HistoryUpdate) Where(ps ...predicate.History) *HistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetText sets the "text" field.
func (_u *HistoryUpdate) SetText(v string) *HistoryUpdate {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableText(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// SetVoice sets the "voice" field.
func (_u *HistoryUpdate) SetVoice(v string) *HistoryUpdate {
	_u.mutation.SetVoice(v)
	return _u
}

// SetNillableVoice sets the "voice" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableVoice(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetVoice(*v)
	}
	return _u
}

// SetRate sets the "rate" field.
func (_u *HistoryUpdate) SetRate(v float64) *HistoryUpdate {
	_u.mutation.ResetRate()
	_u.mutation.SetRate(v)
	return _u
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableRate(v *float64) *HistoryUpdate {
	if v != nil {
		_u.SetRate(*v)
	}
	return _u
}

// AddRate adds value to the "rate" field.
func (_u *HistoryUpdate) AddRate(v float64) *HistoryUpdate {
	_u.mutation.AddRate(v)
	return _u
}

// SetPitch sets the "pitch" field.
func (_u *HistoryUpdate) SetPitch(v float64) *HistoryUpdate {
	_u.mutation.ResetPitch()
	_u.mutation.SetPitch(v)
	return _u
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillablePitch(v *float64) *HistoryUpdate {
	if v != nil {
		_u.SetPitch(*v)
	}
	return _u
}

// AddPitch adds value to the "pitch" field.
func (_u *HistoryUpdate) AddPitch(v float64) *HistoryUpdate {
	_u.mutation.AddPitch(v)
	return _u
}

// SetVolume sets the "volume" field.
func (_u *HistoryUpdate) SetVolume(v float64) *HistoryUpdate {
	_u.mutation.ResetVolume()
	_u.mutation.SetVolume(v)
	return _u
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableVolume(v *float64) *HistoryUpdate {
	if v != nil {
		_u.SetVolume(*v)
	}
	return _u
}

// AddVolume adds value to the "volume" field.
func (_u *HistoryUpdate) AddVolume(v float64) *HistoryUpdate {
	_u.mutation.AddVolume(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *HistoryUpdate) SetCreatedAt(v time.Time) *HistoryUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableCreatedAt(v *time.Time) *HistoryUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HistoryUpdate) SetUpdatedAt(v time.Time) *HistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *HistoryUpdate) SetUserID(id uuid.UUID) *HistoryUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *HistoryUpdate) SetNillableUserID(id *uuid.UUID) *HistoryUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *HistoryUpdate) SetUser(v *User) *HistoryUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (_u *HistoryUpdate) Mutation() *HistoryMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *HistoryUpdate) ClearUser() *HistoryUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HistoryUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *HistoryUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := history.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HistoryUpdate) check() error {
	if v, ok := _u.mutation.Text(); ok {
		if err := history.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`generated: validator failed for field "History.text": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Voice(); ok {
		if err := history.VoiceValidator(v); err != nil {
			return &ValidationError{Name: "voice", err: fmt.Errorf(`generated: validator failed for field "History.voice": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Rate(); ok {
		if err := history.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`generated: validator failed for field "History.rate": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Pitch(); ok {
		if err := history.PitchValidator(v); err != nil {
			return &ValidationError{Name: "pitch", err: fmt.Errorf(`generated: validator failed for field "History.pitch": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Volume(); ok {
		if err := history.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`generated: validator failed for field "History.volume": %w`, err)}
		}
	}
	return nil
}

func (_u *HistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Text(); ok {
		_spec.SetField(history.FieldText, field.TypeString, value)
	}
	if value, ok := _u.mutation.Voice(); ok {
		_spec.SetField(history.FieldVoice, field.TypeString, value)
	}
	if value, ok := _u.mutation.Rate(); ok {
		_spec.SetField(history.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRate(); ok {
		_spec.AddField(history.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Pitch(); ok {
		_spec.SetField(history.FieldPitch, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPitch(); ok {
		_spec.AddField(history.FieldPitch, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Volume(); ok {
		_spec.SetField(history.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedVolume(); ok {
		_spec.AddField(history.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(history.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(history.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HistoryUpdateOne is the builder for updating a single History entity.
type HistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HistoryMutation
}

// SetText sets the "text" field.
func (_u *HistoryUpdateOne) SetText(v string) *HistoryUpdateOne {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableText(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// SetVoice sets the "voice" field.
func (_u *HistoryUpdateOne) SetVoice(v string) *HistoryUpdateOne {
	_u.mutation.SetVoice(v)
	return _u
}

// SetNillableVoice sets the "voice" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableVoice(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetVoice(*v)
	}
	return _u
}

// SetRate sets the "rate" field.
func (_u *HistoryUpdateOne) SetRate(v float64) *HistoryUpdateOne {
	_u.mutation.ResetRate()
	_u.mutation.SetRate(v)
	return _u
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableRate(v *float64) *HistoryUpdateOne {
	if v != nil {
		_u.SetRate(*v)
	}
	return _u
}

// AddRate adds value to the "rate" field.
func (_u *HistoryUpdateOne) AddRate(v float64) *HistoryUpdateOne {
	_u.mutation.AddRate(v)
	return _u
}

// SetPitch sets the "pitch" field.
func (_u *HistoryUpdateOne) SetPitch(v float64) *HistoryUpdateOne {
	_u.mutation.ResetPitch()
	_u.mutation.SetPitch(v)
	return _u
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillablePitch(v *float64) *HistoryUpdateOne {
	if v != nil {
		_u.SetPitch(*v)
	}
	return _u
}

// AddPitch adds value to the "pitch" field.
func (_u *HistoryUpdateOne) AddPitch(v float64) *HistoryUpdateOne {
	_u.mutation.AddPitch(v)
	return _u
}

// SetVolume sets the "volume" field.
func (_u *HistoryUpdateOne) SetVolume(v float64) *HistoryUpdateOne {
	_u.mutation.ResetVolume()
	_u.mutation.SetVolume(v)
	return _u
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableVolume(v *float64) *HistoryUpdateOne {
	if v != nil {
		_u.SetVolume(*v)
	}
	return _u
}

// AddVolume adds value to the "volume" field.
func (_u *HistoryUpdateOne) AddVolume(v float64) *HistoryUpdateOne {
	_u.mutation.AddVolume(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *HistoryUpdateOne) SetCreatedAt(v time.Time) *HistoryUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableCreatedAt(v *time.Time) *HistoryUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HistoryUpdateOne) SetUpdatedAt(v time.Time) *HistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *HistoryUpdateOne) SetUserID(id uuid.UUID) *HistoryUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableUserID(id *uuid.UUID) *HistoryUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *HistoryUpdateOne) SetUser(v *User) *HistoryUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (_u *HistoryUpdateOne) Mutation() *HistoryMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *HistoryUpdateOne) ClearUser() *HistoryUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the HistoryUpdate builder.
func (_u *HistoryUpdateOne) Where(ps ...predicate.History) *HistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HistoryUpdateOne) Select(field string, fields ...string) *HistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated History entity.
func (_u *HistoryUpdateOne) Save(ctx context.Context) (*History, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HistoryUpdateOne) SaveX(ctx context.Context) *History {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *HistoryUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := history.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Text(); ok {
		if err := history.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`generated: validator failed for field "History.text": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Voice(); ok {
		if err := history.VoiceValidator(v); err != nil {
			return &ValidationError{Name: "voice", err: fmt.Errorf(`generated: validator failed for field "History.voice": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Rate(); ok {
		if err := history.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`generated: validator failed for field "History.rate": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Pitch(); ok {
		if err := history.PitchValidator(v); err != nil {
			return &ValidationError{Name: "pitch", err: fmt.Errorf(`generated: validator failed for field "History.pitch": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Volume(); ok {
		if err := history.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`generated: validator failed for field "History.volume": %w`, err)}
		}
	}
	return nil
}

func (_u *HistoryUpdateOne) sqlSave(ctx context.Context) (_node *History, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "History.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history.FieldID)
		for _, f := range fields {
			if !history.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != history.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Text(); ok {
		_spec.SetField(history.FieldText, field.TypeString, value)
	}
	if value, ok := _u.mutation.Voice(); ok {
		_spec.SetField(history.FieldVoice, field.TypeString, value)
	}
	if value, ok := _u.mutation.Rate(); ok {
		_spec.SetField(history.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRate(); ok {
		_spec.AddField(history.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Pitch(); ok {
		_spec.SetField(history.FieldPitch, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPitch(); ok {
		_spec.AddField(history.FieldPitch, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Volume(); ok {
		_spec.SetField(history.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedVolume(); ok {
		_spec.AddField(history.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(history.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(history.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UserTable,
			Columns: []string{history.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &History{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
