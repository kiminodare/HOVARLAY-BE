// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/google/uuid"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/history"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/user"
	"github.com/kiminodare/HOVARLAY-BE/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	historyFields := schema.History{}.Fields()
	_ = historyFields
	// historyDescText is the schema descriptor for text field.
	historyDescText := historyFields[1].Descriptor()
	// history.TextValidator is a validator for the "text" field. It is called by the builders before save.
	history.TextValidator = historyDescText.Validators[0].(func(string) error)
	// historyDescVoice is the schema descriptor for voice field.
	historyDescVoice := historyFields[2].Descriptor()
	// history.VoiceValidator is a validator for the "voice" field. It is called by the builders before save.
	history.VoiceValidator = historyDescVoice.Validators[0].(func(string) error)
	// historyDescRate is the schema descriptor for rate field.
	historyDescRate := historyFields[3].Descriptor()
	// history.DefaultRate holds the default value on creation for the rate field.
	history.DefaultRate = historyDescRate.Default.(float64)
	// history.RateValidator is a validator for the "rate" field. It is called by the builders before save.
	history.RateValidator = func() func(float64) error {
		validators := historyDescRate.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(rate float64) error {
			for _, fn := range fns {
				if err := fn(rate); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// historyDescPitch is the schema descriptor for pitch field.
	historyDescPitch := historyFields[4].Descriptor()
	// history.DefaultPitch holds the default value on creation for the pitch field.
	history.DefaultPitch = historyDescPitch.Default.(float64)
	// history.PitchValidator is a validator for the "pitch" field. It is called by the builders before save.
	history.PitchValidator = func() func(float64) error {
		validators := historyDescPitch.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(pitch float64) error {
			for _, fn := range fns {
				if err := fn(pitch); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// historyDescVolume is the schema descriptor for volume field.
	historyDescVolume := historyFields[5].Descriptor()
	// history.DefaultVolume holds the default value on creation for the volume field.
	history.DefaultVolume = historyDescVolume.Default.(float64)
	// history.VolumeValidator is a validator for the "volume" field. It is called by the builders before save.
	history.VolumeValidator = func() func(float64) error {
		validators := historyDescVolume.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(volume float64) error {
			for _, fn := range fns {
				if err := fn(volume); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// historyDescCreatedAt is the schema descriptor for created_at field.
	historyDescCreatedAt := historyFields[6].Descriptor()
	// history.DefaultCreatedAt holds the default value on creation for the created_at field.
	history.DefaultCreatedAt = historyDescCreatedAt.Default.(func() time.Time)
	// historyDescUpdatedAt is the schema descriptor for updated_at field.
	historyDescUpdatedAt := historyFields[7].Descriptor()
	// history.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	history.DefaultUpdatedAt = historyDescUpdatedAt.Default.(func() time.Time)
	// history.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	history.UpdateDefaultUpdatedAt = historyDescUpdatedAt.UpdateDefault.(func() time.Time)
	// historyDescID is the schema descriptor for id field.
	historyDescID := historyFields[0].Descriptor()
	// history.DefaultID holds the default value on creation for the id field.
	history.DefaultID = historyDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
