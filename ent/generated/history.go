// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/history"
	"github.com/kiminodare/HOVARLAY-BE/ent/generated/user"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Voice holds the value of the "voice" field.
	Voice string `json:"voice,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate float64 `json:"rate,omitempty"`
	// Pitch holds the value of the "pitch" field.
	Pitch float64 `json:"pitch,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume float64 `json:"volume,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HistoryQuery when eager-loading is set.
	Edges          HistoryEdges `json:"edges"`
	user_histories *uuid.UUID
	selectValues   sql.SelectValues
}

// HistoryEdges holds the relations/edges for other nodes in the graph.
type HistoryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldRate, history.FieldPitch, history.FieldVolume:
			values[i] = new(sql.NullFloat64)
		case history.FieldText, history.FieldVoice:
			values[i] = new(sql.NullString)
		case history.FieldCreatedAt, history.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case history.FieldID:
			values[i] = new(uuid.UUID)
		case history.ForeignKeys[0]: // user_histories
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (_m *History) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case history.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				_m.Text = value.String
			}
		case history.FieldVoice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field voice", values[i])
			} else if value.Valid {
				_m.Voice = value.String
			}
		case history.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				_m.Rate = value.Float64
			}
		case history.FieldPitch:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pitch", values[i])
			} else if value.Valid {
				_m.Pitch = value.Float64
			}
		case history.FieldVolume:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				_m.Volume = value.Float64
			}
		case history.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case history.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case history.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_histories", values[i])
			} else if value.Valid {
				_m.user_histories = new(uuid.UUID)
				*_m.user_histories = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History.
// This includes values selected through modifiers, order, etc.
func (_m *History) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the History entity.
func (_m *History) QueryUser() *UserQuery {
	return NewHistoryClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *History) Update() *HistoryUpdateOne {
	return NewHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *History) Unwrap() *History {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: History is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("text=")
	builder.WriteString(_m.Text)
	builder.WriteString(", ")
	builder.WriteString("voice=")
	builder.WriteString(_m.Voice)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rate))
	builder.WriteString(", ")
	builder.WriteString("pitch=")
	builder.WriteString(fmt.Sprintf("%v", _m.Pitch))
	builder.WriteString(", ")
	builder.WriteString("volume=")
	builder.WriteString(fmt.Sprintf("%v", _m.Volume))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History
